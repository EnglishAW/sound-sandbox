{"version":3,"sources":["utility/helpers.ts","context/audio-context.ts","components/gain-knob/gain-knob.tsx","utility/numbers.ts","utility/intervals.ts","utility/key-maps.ts","hooks/keyboard-map/use-keyboard-map.ts","lib/audio-buffer.ts","pages/harmonics.tsx","components/page-navigation/page-navigation.tsx","lib/filters.ts","components/white-noise/white-noise.tsx","pages/random-frequency.tsx","routes.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["forRange","range","cb","i","constate","useState","window","AudioContext","audioContext","setAudioContext","mgn","createGain","gain","value","connect","destination","masterGainNode","oscillators","setOscillators","audioContextState","audioContextActions","addOscillator","frequency_hz","waveform","gainValue","undefined","osc","createOscillator","type","frequency","oscGainNode","start","newOscillator","id","uuid","node","gainNode","prev","addBufferSource","arrayBuffers","loop","sourceBuffer","createBuffer","length","sampleRate","numberOfChannels","channel","copyToChannel","source","createBufferSource","buffer","stopAllOscillators","forEach","stop","disconnect","removeOscillator","now","currentTime","releaseDuration","cancelScheduledValues","setValueAtTime","linearRampToValueAtTime","state","filter","o","resetAudioContext","close","then","AudioContextProvider","useAudioContextState","useAudioContextActions","GainKnob","label","onIncreaseGain","onDecreaseGain","NodeContainer","Label","Control","onClick","styled","div","p","roundNum","num","place","sigFig","Math","pow","round","Number","EPSILON","pureIntervals","harmonicInterval","ratio","fund","accumulateInterval","interval","tonic","degree","MAJOR_THIRD","PERFECT_FOURTH","PERFECT_FIFTH","MAJOR_SIXTH","MAJOR_SEVETH","getNoteAt","FUNDAMENTAL","perfectFifthDegree","minorThirdDegree","fundamental","pureIntervalCoordinate","intervalKeyboard","KeyQ","KeyW","KeyE","KeyR","KeyT","KeyY","KeyU","KeyI","KeyO","KeyP","KeyA","KeyS","KeyD","KeyF","KeyG","KeyH","KeyJ","KeyK","KeyL","Semicolon","KeyZ","KeyX","KeyC","KeyV","KeyB","KeyN","KeyM","Comma","Period","useKeyboardMap","keyMap","onKeysPressed","onKeysRelease","target","DEFAULT_TARGET","document","body","_target","pressedKeys","useRef","useEffect","onKeysPress","e","keyCode","code","current","addEventListener","onKeyUp","removeEventListener","getSineWaveAmplitude","maxAmplitude","time","sin","PI","getHarmonicSineWaveBufferArray","harmonicGains","numberOfSamples","Fraction","n","getFrequencyBufferSize","Float32Array","from","_","map","timeIndex","amplitude","harmonicIndex","makeGainChangeInArray","index","direction","pState","adjust","v","max","min","Row","Column","Harmonics","masterHarmonicValues","setMasterHarmonicValues","masterVolume","setMasterVolume","lastBuffer","setLastBuffer","synthesize","useCallback","wave","k","keyOscs","scopeDataFromBuffer","useMemo","arrayBuffer","numberOfPoints","sampleSection","slice","mod","result","push","x","y","bufferToCoordinates","scopeData","hValue","key","console","log","width","height","xDomain","yDomain","data","color","NavigationWrapper","PageNavigation","to","lowPassFilter","cornerFrequency","audioBuffer","attenuation","twoPiDeltaTFc","getAttenuation","avgDeltaAmp","numSamples","getChannelData","currAmplitude","channelBuffer","prevAmplitude","deltaAmplitude","Wrapper","WhiteNoise","whiteNoiseBuffer","duration","nowBuffering","random","getWhiteNoiseBuffer","keyMapValue","RandomFrequency","onkeyup","ceil","floor","Routes","exact","path","component","AppWrapper","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b14fc12c.chunk.js","sourcesContent":["type Range = [number, number]\r\n\r\nexport const forRange = (range:Range, cb) => {\r\n    for(var i = range[0]; i < range[1]; i++) {\r\n        cb(i)\r\n    }\r\n}\r\n","import { useState } from 'react'\r\nimport constate from 'constate'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { forRange } from 'utility/helpers'\r\n\r\nconst useAudioContext = () => {\r\n    const [audioContext, setAudioContext] = useState(\r\n        new window.AudioContext(/*|| window.webkitAudioContext*/)\r\n    )\r\n\r\n    const resetAudioContext = () =>{\r\n        audioContext.close().then(()=>{\r\n            setAudioContext(new window.AudioContext())\r\n        })\r\n    }\r\n\r\n    const [masterGainNode] = useState(() => {\r\n        const mgn = audioContext.createGain()\r\n        mgn.gain.value = 0.5\r\n        mgn.connect(audioContext.destination)\r\n        return mgn\r\n    })\r\n    const [oscillators, setOscillators] = useState<\r\n        Array<{ id: string; node: OscillatorNode; gainNode: GainNode }>\r\n    >([])\r\n\r\n    function addOscillator(\r\n        frequency_hz,\r\n        waveform: OscillatorType = 'sine',\r\n        gainValue: number | undefined = undefined\r\n    ) {\r\n        var osc = audioContext.createOscillator() // instantiate an oscillator\r\n        osc.type = waveform // this is the default - also square, sawtooth, triangle\r\n        osc.frequency.value = frequency_hz // Hz\r\n        const oscGainNode =\r\n            gainValue !== undefined ? audioContext.createGain() : masterGainNode\r\n        if (!!gainValue) {\r\n            // var volume = audioContext.createGain();\r\n            osc.connect(oscGainNode)\r\n            oscGainNode.connect(masterGainNode) // connect it to the destination\r\n            oscGainNode.gain.value = gainValue\r\n        } else {\r\n            // Oscillator to Master Gain Node\r\n            osc.connect(oscGainNode)\r\n        }\r\n\r\n        osc.start() // start the oscillator\r\n        const newOscillator = { id: uuid(), node: osc, gainNode: oscGainNode }\r\n        // console.log(newOscillator)\r\n        // decay(newOscillator, volume)\r\n\r\n        setOscillators((prev) => [...prev, newOscillator])\r\n\r\n        return newOscillator\r\n    }\r\n\r\n    function removeOscillator(osc) {\r\n        // osc.node.stop()\r\n        const gainNode: GainNode = osc.gainNode\r\n        var now = audioContext.currentTime\r\n        var releaseDuration = now + 0.4\r\n        gainNode.gain.cancelScheduledValues(now)\r\n\r\n        // Anchor beginning of ramp at current value.\r\n        gainNode.gain.setValueAtTime(gainNode.gain.value, now)\r\n        gainNode.gain.linearRampToValueAtTime(0.0, releaseDuration)\r\n        osc.node.stop(releaseDuration)\r\n        setOscillators((state) => {\r\n            // console.log(osc)\r\n            // console.log(state.filter((o) => osc.id !== o.id))\r\n            return state.filter((o) => osc.id !== o.id)\r\n        })\r\n    }\r\n\r\n    function stopAllOscillators() {\r\n        oscillators.forEach((osc) => {\r\n            osc.node.stop()\r\n            osc.node.disconnect()\r\n        })\r\n        setOscillators([])\r\n    }\r\n\r\n    function addBufferSource(\r\n        arrayBuffers: Array<Float32Array>,\r\n        loop: boolean = false\r\n    ) {\r\n        // Get an AudioBufferSourceNode.\r\n        // This is the AudioNode to use when we want to play an AudioBuffer\r\n\r\n        const sourceBuffer = audioContext.createBuffer(\r\n            arrayBuffers.length,\r\n            arrayBuffers[0].length,\r\n            audioContext.sampleRate\r\n        )\r\n\r\n        forRange([0, sourceBuffer.numberOfChannels], (channel) => {\r\n            sourceBuffer.copyToChannel(arrayBuffers[channel], channel)\r\n        })\r\n\r\n        var source = audioContext.createBufferSource()\r\n        // set the buffer in the AudioBufferSourceNode\r\n        source.buffer = sourceBuffer\r\n        source.loop = loop\r\n        // connect the AudioBufferSourceNode to the\r\n        // destination so we can hear the sound\r\n        source.connect(audioContext.destination)\r\n\r\n        // start the source playing\r\n        source.start()\r\n\r\n        return source\r\n    }\r\n\r\n    return {\r\n        audioContextState: {\r\n            audioContext,\r\n            masterGainNode,\r\n            oscillators,\r\n        },\r\n        audioContextActions: {\r\n            addOscillator,\r\n            addBufferSource,\r\n            stopAllOscillators,\r\n            removeOscillator,\r\n            resetAudioContext\r\n        },\r\n    }\r\n}\r\n\r\nconst [\r\n    AudioContextProvider,\r\n    useAudioContextState,\r\n    useAudioContextActions,\r\n] = constate(\r\n    useAudioContext,\r\n    (value) => value.audioContextState,\r\n    (value) => value.audioContextActions\r\n)\r\n\r\nexport { AudioContextProvider, useAudioContextState, useAudioContextActions }\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\n\r\ntype Props = {\r\n    gain: number\r\n    label?: string\r\n    onIncreaseGain: any\r\n    onDecreaseGain: any\r\n}\r\n\r\nexport function GainKnob({ label, gain, onIncreaseGain, onDecreaseGain }: Props) {\r\n    return (\r\n        <NodeContainer>\r\n            <Label>{label || 'Gain'}</Label>\r\n            <Control>\r\n                <div>{gain}</div>\r\n                <button onClick={onIncreaseGain}>▲</button>\r\n                <button onClick={onDecreaseGain}>▼</button>\r\n            </Control>\r\n        </NodeContainer>\r\n    )\r\n}\r\nconst Control = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1rem;\r\n`\r\n\r\nconst NodeContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 75px;\r\n    height: 150px;\r\n    background-color: #a0a0a0;\r\n    user-select: none;\r\n    border: 1px solid black;\r\n    border-radius: 5px;\r\n    margin: 2px;\r\n`\r\nconst Label = styled.p`\r\n    text-align: center;\r\n    width: 100%;\r\n    height: 50px;\r\n    margin: 0;\r\n    background-color: rgba(50, 50, 50, 0.5)\r\n`\r\n\r\n","export const roundNum = (num: number, place?: number) => {\r\n    const sigFig = Math.pow(10, place || 0)\r\n    return Math.round((num + Number.EPSILON) * sigFig) / sigFig\r\n}\r\nexport const inRange = (min: number, max: number, value: number) => {\r\n    return value < min ? Math.max(value, min) : Math.min(value, max)\r\n}","export const pureIntervals = {\r\n    MINOR_SECOND: 25 / 24,\r\n    MAJOR_SECOND: 9 / 8,\r\n    MINOR_THIRD: 6 / 5,\r\n    MAJOR_THIRD: 5 / 4,\r\n    PERFECT_FOURTH: 4 / 3,\r\n    DIMINISHED_FIFTH: 45 / 32,\r\n    PERFECT_FIFTH: 3 / 2,\r\n    MINOR_SIXTH: 8 / 5,\r\n    MAJOR_SIXTH: 5 / 3,\r\n    MINOR_SEVENTH: 9 / 5,\r\n    MAJOR_SEVETH: 15 / 8,\r\n}\r\n\r\nexport const limit5Intervals = {\r\n    MINOR_SECOND: 16 / 15,\r\n    MAJOR_SECOND: 9 / 8,\r\n    MINOR_THIRD: 6 / 5,\r\n    MAJOR_THIRD: 5 / 4,\r\n    PERFECT_FOURTH: 4 / 3,\r\n    AUG_FOURTH: 45 / 32,\r\n    DIM_FIFTH: 25 / 18,\r\n    PERFECT_FIFTH: 3 / 2,\r\n    MINOR_SIXTH: 8 / 5,\r\n    MAJOR_SIXTH: 5 / 3,\r\n    MINOR_SEVENTH: 16 / 9,\r\n    MAJOR_SEVENTH: 15 / 8,\r\n}\r\n\r\nexport const harmonicInterval = (ratio: number, fund: number) => {\r\n    return (fund * ratio)\r\n}\r\n\r\nconst accumulateInterval= (interval: number, tonic: number, degree: number = 1) => {\r\n    return Math.pow(interval, degree) * tonic\r\n}\r\n\r\nexport const pureIntervalCoordinate = (perfectFifthDegree, minorThirdDegree, fundamental) => {\r\n    return accumulateInterval(pureIntervals.MINOR_THIRD, accumulateInterval(pureIntervals.PERFECT_FIFTH, fundamental, perfectFifthDegree), minorThirdDegree)\r\n}","import { pureIntervals, pureIntervalCoordinate, harmonicInterval } from \"./intervals\"\r\n\r\n// const normalizeOctave = (value, fund) => {\r\n//     const ratio = (value / fund)\r\n//     // (frequency / fundamental) = 2^(n:number of octaves above fundamental)\r\n//     // n = log(frequency / fundamental) / log(2)\r\n//     const octavesAbove = Math.floor((Math.log(ratio) / Math.log(2)))\r\n//     const transposedValue = value / Math.pow(2, octavesAbove)\r\n\r\n//     return transposedValue\r\n// }\r\n\r\nconst FUNDAMENTAL = 440\r\n\r\nconst {\r\n    MAJOR_SECOND,\r\n    MAJOR_THIRD,\r\n    PERFECT_FOURTH,\r\n    PERFECT_FIFTH,\r\n    MAJOR_SIXTH,\r\n    MAJOR_SEVETH\r\n} = pureIntervals\r\n\r\nexport const secondRowJustIntonation = {\r\n    KeyA: 440, // 1\r\n    KeyS: harmonicInterval(MAJOR_SECOND, 440), // 2\r\n    KeyD: harmonicInterval(MAJOR_THIRD, 440), // 3\r\n    KeyF: harmonicInterval(PERFECT_FOURTH, 440), // 4\r\n    KeyG: harmonicInterval(PERFECT_FIFTH, 440), // 5\r\n    KeyH: harmonicInterval(MAJOR_SIXTH, 440), // 6\r\n    KeyJ: harmonicInterval(MAJOR_SEVETH, 440), // 7\r\n    KeyK: harmonicInterval(FUNDAMENTAL * 2, 440), // 1+\r\n}\r\n\r\nconst getNoteAt = (perfectFifthDegree, minorThirdDegree) => {\r\n    return pureIntervalCoordinate(perfectFifthDegree, minorThirdDegree, FUNDAMENTAL)\r\n}\r\nexport const intervalKeyboard = {\r\n\r\n    KeyQ: getNoteAt(-5, 1),\r\n    KeyW: getNoteAt(-4, 1),\r\n    KeyE: getNoteAt(-3, 1),\r\n    KeyR: getNoteAt(-2, 1),\r\n    KeyT: getNoteAt(-1, 1),\r\n    KeyY: getNoteAt(0, 1),\r\n    KeyU: getNoteAt(1, 1),\r\n    KeyI: getNoteAt(2, 1),\r\n    KeyO: getNoteAt(3, 1),\r\n    KeyP: getNoteAt(4, 1),\r\n\r\n    KeyA: getNoteAt(-4, 0),\r\n    KeyS: getNoteAt(-3, 0),\r\n    KeyD: getNoteAt(-2, 0),\r\n    KeyF: getNoteAt(-1, 0),\r\n    KeyG: getNoteAt(0, 0),\r\n    KeyH: getNoteAt(1, 0),\r\n    KeyJ: getNoteAt(2, 0),\r\n    KeyK: getNoteAt(3, 0),\r\n    KeyL: getNoteAt(4, 0),\r\n    Semicolon: getNoteAt(5, 0),\r\n\r\n    KeyZ: getNoteAt(-3, -1),\r\n    KeyX: getNoteAt(-2, -1),\r\n    KeyC: getNoteAt(-1, -1),\r\n    KeyV: getNoteAt(0, -1),\r\n    KeyB: getNoteAt(1, -1),\r\n    KeyN: getNoteAt(2, -1),\r\n    KeyM: getNoteAt(3, -1),\r\n    Comma: getNoteAt(4, -1),\r\n    Period: getNoteAt(5, -1),\r\n\r\n}","import { useEffect, useRef } from 'react'\r\n\r\ntype KeyMap = Record<string, any>\r\ntype KeyMapValue = KeyMap[keyof KeyMap]\r\n\r\ntype PressedKeys<T = any> = Record<string, T>\r\ntype PressedKeyValue = PressedKeys[keyof PressedKeys]\r\n\r\ntype Props = {\r\n    keyMap: KeyMap\r\n    target?: HTMLElement\r\n    onKeysPressed: (keyMapValue: KeyMapValue) => any\r\n    onKeysRelease?: (pressedKeyValue: PressedKeyValue) => void\r\n}\r\n\r\nexport function useKeyboardMap({ keyMap, onKeysPressed, onKeysRelease, target }: Props) {\r\n    const DEFAULT_TARGET = document.body\r\n    const _target = target || DEFAULT_TARGET\r\n    const pressedKeys = useRef<PressedKeys>({})\r\n\r\n    useEffect(() => {\r\n\r\n        // Key Press\r\n        const onKeysPress = (e: KeyboardEvent) => {\r\n            const keyCode = e.code\r\n            if (!pressedKeys.current[keyCode]) {\r\n                if (!!keyMap[keyCode]) {\r\n                    pressedKeys.current[keyCode] = onKeysPressed(keyMap[keyCode])\r\n                }\r\n            }\r\n        }\r\n        _target.addEventListener('keypress', onKeysPress)\r\n\r\n        // Key Up\r\n        const onKeyUp = (e: any) => {\r\n            const keyCode = e.code\r\n            if (pressedKeys.current[keyCode]) {\r\n                !!onKeysRelease && onKeysRelease(pressedKeys.current[keyCode])\r\n\r\n                delete pressedKeys.current[keyCode]\r\n            }\r\n        }\r\n        _target.addEventListener('keyup', onKeyUp)\r\n\r\n        return () => {\r\n            _target.removeEventListener('keypress', onKeysPress)\r\n            _target.removeEventListener('keyup', onKeyUp)\r\n        }\r\n    }, [keyMap, onKeysPressed, onKeysRelease, _target])\r\n\r\n    return null\r\n\r\n}\r\n","import Fraction from \"fraction.js\";\r\nimport { sum } from \"rambda\";\r\n\r\nexport const getWhiteNoiseBuffer = (duration, audioContext) => {\r\n    var arrayBuffer = audioContext.createBuffer(2, audioContext.sampleRate * duration, audioContext.sampleRate);\r\n\r\n    // Fill the buffer with white noise;\r\n    // just random values between -1.0 and 1.0\r\n    for (var channel = 0; channel < arrayBuffer.numberOfChannels; channel++) {\r\n        // This gives us the actual array that contains the data\r\n        var nowBuffering = arrayBuffer.getChannelData(channel);\r\n        for (var i = 0; i < arrayBuffer.length; i++) {\r\n            // Math.random() is in [0; 1.0]\r\n            // audio needs to be in [-1.0; 1.0]\r\n\r\n            // White Noise\r\n            nowBuffering[i] = Math.random() * 2 - 1;\r\n\r\n            // Tone A 440\r\n            // nowBuffering[i] = Math.sin(440 * i);\r\n        }\r\n    }\r\n\r\n    return arrayBuffer\r\n}\r\n\r\n/**\r\n * Return the smallest number of samples that is evenly divisible by cycles \r\n * @param sampleRate \r\n * @param frequency \r\n */\r\nexport const getFrequencyBufferSize = (sampleRate, frequency) => {\r\n    // Ratio samples per cycle \r\n    const samplesPerCycle = new Fraction(sampleRate/frequency)\r\n\r\n    return samplesPerCycle.n\r\n}\r\n\r\nexport const getSineWaveBuffer = (frequency, duration, audioContext: AudioContext) => {\r\n    var arrayBuffer = audioContext.createBuffer(2, audioContext.sampleRate * duration, audioContext.sampleRate);\r\n\r\n    // Fill the buffer with white noise;\r\n    // just random values between -1.0 and 1.0\r\n    for (var channel = 0; channel < arrayBuffer.numberOfChannels; channel++) {\r\n        // This gives us the actual array that contains the data\r\n        var nowBuffering = arrayBuffer.getChannelData(channel);\r\n        for (var i = 0; i < arrayBuffer.length; i++) {\r\n\r\n            // Tone A 440\r\n            nowBuffering[i] = Math.sin(2 * Math.PI * frequency * ((i % audioContext.sampleRate) / audioContext.sampleRate));\r\n        }\r\n    }\r\n\r\n    return arrayBuffer\r\n}\r\n\r\nexport const getSineWaveAmplitude = (frequency, maxAmplitude, time) => {\r\n    return maxAmplitude * Math.sin(2 * Math.PI * frequency * time)\r\n}\r\nexport const getSineWaveBufferArray = (frequency, amplitude, duration, sampleRate) => {\r\n    const bufferArray = Float32Array.from({ length: sampleRate * duration }, (_, i) => i + 1)\r\n    return bufferArray.map((_, i) => amplitude * Math.sin(2 * Math.PI * frequency * ((i % sampleRate) / sampleRate)))\r\n}\r\nexport const getHarmonicSineWaveBufferArray = (frequency, harmonicGains: any[], sampleRate) => {\r\n    const numberOfSamples = getFrequencyBufferSize(sampleRate, frequency)\r\n    const bufferArray = Float32Array.from({ length: numberOfSamples }, (_, i) => i + 1)\r\n\r\n    return bufferArray.map((_, timeIndex) => {\r\n        const time = ((timeIndex % sampleRate) / sampleRate)\r\n        let amplitude = 0\r\n\r\n        for(let harmonicIndex = 0; harmonicIndex < harmonicGains.length; harmonicIndex++){\r\n            amplitude += getSineWaveAmplitude(frequency * (harmonicIndex + 1),harmonicGains[harmonicIndex], time)\r\n        }\r\n\r\n        return amplitude\r\n    })\r\n}\r\n\r\nexport const mergeAudioArrayBuffer = (arrayBuffers: Array<Float32Array>) => {\r\n    const waveCount = arrayBuffers.length\r\n    let resultBuffer = Float32Array.from({length: arrayBuffers[0].length })\r\n    for (var i = 0; i < arrayBuffers[0].length; i++) {\r\n        const sampleIndex = i\r\n        resultBuffer[i] = (sum(arrayBuffers.map((wave)=>wave[sampleIndex]))) / waveCount\r\n    }\r\n\r\n    return resultBuffer\r\n}\r\n\r\nexport const bufferToCoordinates= (arrayBuffer: Float32Array, range, numberOfPoints) => {\r\n    const sampleSection = arrayBuffer.slice(0, range)\r\n    const mod = sampleSection.length / numberOfPoints\r\n    let result = []\r\n    for (var i = 0; i < sampleSection.length; i++) {\r\n        if(i % mod === 0){\r\n            result.push({x:i, y:arrayBuffer[i]})\r\n        }\r\n    }\r\n\r\n    return result\r\n}","import {\r\n    useAudioContextActions,\r\n    useAudioContextState,\r\n} from 'context/audio-context'\r\nimport React, { FC, useCallback, useState, useMemo } from 'react'\r\nimport { GainKnob } from 'components/gain-knob/gain-knob'\r\nimport styled from '@emotion/styled'\r\nimport { adjust } from 'rambda'\r\nimport { inRange, roundNum } from 'utility/numbers'\r\nimport { intervalKeyboard } from 'utility/key-maps'\r\nimport { useKeyboardMap } from 'hooks/keyboard-map/use-keyboard-map'\r\nimport {\r\n    bufferToCoordinates,\r\n    getHarmonicSineWaveBufferArray,\r\n} from 'lib/audio-buffer'\r\nimport {\r\n    HorizontalGridLines,\r\n    VerticalGridLines,\r\n    XAxis,\r\n    XYPlot,\r\n    YAxis,\r\n    LineSeries,\r\n} from 'react-vis'\r\n\r\nconst Harmonics: FC<any> = () => {\r\n    const { audioContext, masterGainNode } = useAudioContextState()\r\n    const { addBufferSource } = useAudioContextActions()\r\n\r\n    const [masterHarmonicValues, setMasterHarmonicValues] = useState([\r\n        0.5,\r\n        0.1,\r\n        0.1,\r\n        0.1,\r\n        0.1,\r\n        0.1,\r\n        0.1,\r\n    ])\r\n    const [masterVolume, setMasterVolume] = useState(\r\n        masterGainNode.gain.value * 100\r\n    )\r\n    const [lastBuffer, setLastBuffer] = useState<any>([])\r\n\r\n    masterGainNode.gain.value = masterVolume / 100\r\n\r\n    const synthesize = useCallback(\r\n        (fund: number) => {\r\n            const wave = getHarmonicSineWaveBufferArray(\r\n                fund,\r\n                masterHarmonicValues,\r\n                audioContext.sampleRate\r\n            )\r\n            setLastBuffer(wave)\r\n            return addBufferSource([wave], true)\r\n        },\r\n        [addBufferSource, audioContext.sampleRate, masterHarmonicValues]\r\n    )\r\n\r\n    // Keyboad Events\r\n    const onKeysPressed = useCallback(\r\n        (k) => {\r\n            return synthesize(k)\r\n        },\r\n        [synthesize]\r\n    )\r\n\r\n    const onKeysRelease = useCallback((keyOscs) => {\r\n        keyOscs.stop()\r\n        keyOscs.disconnect()\r\n        setLastBuffer([])\r\n    }, [])\r\n\r\n    useKeyboardMap({ keyMap: intervalKeyboard, onKeysPressed, onKeysRelease })\r\n\r\n    //=====\r\n\r\n    const handleIncreaseGain = (e) => {\r\n        setMasterVolume((gain) => {\r\n            console.log(gain)\r\n            return gain < 100 ? gain + 10 : gain\r\n        })\r\n    }\r\n    const handleDecreaseGain = (e) => {\r\n        setMasterVolume((gain) => (gain > 0 ? gain - 10 : gain))\r\n    }\r\n\r\n    // @ts-ignore\r\n    const scopeDataFromBuffer = useMemo(\r\n        () => bufferToCoordinates(lastBuffer, 600, 300),\r\n        [lastBuffer]\r\n    )\r\n    const scopeData =\r\n        scopeDataFromBuffer.length > 0\r\n            ? scopeDataFromBuffer\r\n            : [\r\n                  { x: 0, y: 0 },\r\n                  { x: 1, y: 0 },\r\n              ]\r\n\r\n    return (\r\n        <div>\r\n            <h3>Harmonics</h3>\r\n            <Row>\r\n                {masterHarmonicValues.map((hValue, i) => {\r\n                    return (\r\n                        <div>\r\n                            <GainKnob\r\n                                label={`H${i + 1}`}\r\n                                gain={roundNum(hValue * 100)}\r\n                                onIncreaseGain={() =>\r\n                                    setMasterHarmonicValues(\r\n                                        makeGainChangeInArray(i, 1)\r\n                                    )\r\n                                }\r\n                                onDecreaseGain={() =>\r\n                                    setMasterHarmonicValues(\r\n                                        makeGainChangeInArray(i, -1)\r\n                                    )\r\n                                }\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n                <div key=\"master-gain\">\r\n                    <GainKnob\r\n                        label=\"Master Gain\"\r\n                        gain={masterVolume}\r\n                        onIncreaseGain={handleIncreaseGain}\r\n                        onDecreaseGain={handleDecreaseGain}\r\n                    />\r\n                </div>\r\n            </Row>\r\n            <Column>\r\n                <XYPlot\r\n                    width={400}\r\n                    height={300}\r\n                    xDomain={[0, 600]}\r\n                    yDomain={[-1.25, 1.25]}\r\n                >\r\n                    <XAxis />\r\n                    <YAxis />\r\n                    <HorizontalGridLines />\r\n                    <VerticalGridLines />\r\n                    <LineSeries data={scopeData} color=\"#FF00FF\" />\r\n                </XYPlot>\r\n                <h4>From buffer of the last note played</h4>\r\n            </Column>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst makeGainChangeInArray = (index, direction) => (pState) =>\r\n    adjust(index, (v: number) => inRange(0, 1, v + 0.05 * direction), pState)\r\n\r\nconst Row = styled.div`\r\n    display: flex;\r\n`\r\nconst Column = styled.div`\r\n    display: inline-flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\nexport default Harmonics\r\n","import styled from '@emotion/styled'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// import RandomFrequency from './pages/random-frequency'\r\n// import Intervals from 'pages/intervals'\r\n// import WhiteNoise from 'components/white-noise/white-noise'\r\n\r\n\r\n// type Props = {}\r\n\r\nconst PageNavigation = () => {\r\n    return <NavigationWrapper>\r\n        <Link to='/relative-intervals'>Relative Intervals</Link>\r\n        <Link to='/whitenoise'>White Noise</Link>\r\n        <Link to='/random'>Random Frequency</Link>\r\n    </NavigationWrapper>\r\n}\r\nconst NavigationWrapper = styled.div`\r\n    display:flex;\r\n    justify-content: space-between;\r\n    padding: 5px;\r\n    > * {\r\n        margin: 0 10px;\r\n    }\r\n    border-bottom: 2px solid black;\r\n`\r\nexport default PageNavigation\r\n","import { range } from \"rambda\"\r\n\r\nexport const getAttenuation = (cornerFrequency: number, sampleRate: number) => {\r\n    const twoPiDeltaTFc = 2 * Math.PI * (1 / sampleRate) * cornerFrequency\r\n\r\n    // return twoPiDeltaTFc / (twoPiDeltaTFc + 1)\r\n    return twoPiDeltaTFc / (twoPiDeltaTFc + 1)\r\n}\r\n\r\nexport const lowPassFilter = (cornerFrequency, audioBuffer: AudioBuffer) => {\r\n    const { numberOfChannels, sampleRate } = audioBuffer\r\n\r\n    // Low pass attenuation curve function\r\n    const attenuation = getAttenuation(cornerFrequency, sampleRate)\r\n    let avgDeltaAmp = 0\r\n    let numSamples = 0\r\n    // For all channels\r\n    range(0, numberOfChannels).forEach((channel) => {\r\n\r\n        // For each sample in channel buffer\r\n        audioBuffer.getChannelData(channel).forEach((currAmplitude, i, channelBuffer) => {\r\n            if (i === 0) { channelBuffer[i] = currAmplitude * attenuation; return }\r\n\r\n            const prevAmplitude = channelBuffer[i - 1]\r\n            const deltaAmplitude = currAmplitude - prevAmplitude\r\n            avgDeltaAmp += deltaAmplitude\r\n            numSamples++\r\n\r\n            channelBuffer[i] = prevAmplitude + (attenuation * deltaAmplitude)\r\n        })\r\n    })\r\n    console.log(avgDeltaAmp / numSamples)\r\n    return audioBuffer\r\n}","import { useAudioContextState } from 'context/audio-context'\r\nimport React, { FC, useCallback, useEffect, useState } from 'react'\r\nimport { GainKnob } from 'components/gain-knob/gain-knob'\r\nimport styled from '@emotion/styled'\r\nimport { getWhiteNoiseBuffer } from 'lib/audio-buffer'\r\nimport { lowPassFilter } from 'lib/filters'\r\nimport { useKeyboardMap } from 'hooks/keyboard-map/use-keyboard-map'\r\n\r\nconst keyMap = {\r\n    KeyM: 'MUTE',\r\n}\r\n\r\nconst WhiteNoise: FC<any> = () => {\r\n    const { masterGainNode, audioContext } = useAudioContextState()\r\n\r\n    const [masterVolume, setMasterVolume] = useState(\r\n        masterGainNode.gain.value * 100\r\n    )\r\n\r\n    masterGainNode.gain.value = masterVolume / 100\r\n\r\n    useEffect(() => {\r\n        var source = audioContext.createBufferSource()\r\n\r\n        // const rawBuffer = getSineWaveBuffer(440, 3, audioContext)\r\n        const whiteNoiseBuffer = getWhiteNoiseBuffer(3, audioContext)\r\n        lowPassFilter(100, whiteNoiseBuffer)\r\n        // set the buffer in the AudioBufferSourceNode\r\n        source.buffer = whiteNoiseBuffer\r\n        source.loop = true\r\n\r\n        // connect the AudioBufferSourceNode to the\r\n        // destination so we can hear the sound\r\n        source.connect(masterGainNode)\r\n\r\n        // start the source playing\r\n        source.start()\r\n    }, [audioContext, masterGainNode])\r\n\r\n    // Keyboad Events\r\n    const onKeysPressed = useCallback(\r\n        (keyMapValue) => {\r\n            if (keyMapValue === 'MUTE') {\r\n                if (masterGainNode.gain.value < 0.1) {\r\n                    console.log('mute off')\r\n                    masterGainNode.gain.value = 0.5\r\n                    return 'MUTE_OFF'\r\n                } else {\r\n                    console.log('mute on')\r\n                    masterGainNode.gain.value = 0\r\n                    return 'MUTE_ON'\r\n                }\r\n            }\r\n        },\r\n        [masterGainNode]\r\n    )\r\n\r\n    useKeyboardMap({ keyMap, onKeysPressed })\r\n\r\n    const handleIncreaseGain = (e) => {\r\n        setMasterVolume((gain) => {\r\n            console.log(gain)\r\n            return gain < 100 ? gain + 10 : gain\r\n        })\r\n    }\r\n    const handleDecreaseGain = (e) => {\r\n        setMasterVolume((gain) => (gain > 0 ? gain - 10 : gain))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>White Noise</h3>\r\n            <Wrapper>\r\n                <GainKnob\r\n                    gain={masterVolume}\r\n                    onIncreaseGain={handleIncreaseGain}\r\n                    onDecreaseGain={handleDecreaseGain}\r\n                />\r\n            </Wrapper>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`\r\n\r\nexport default WhiteNoise\r\n","import {\r\n    useAudioContextActions,\r\n    useAudioContextState,\r\n} from 'context/audio-context'\r\nimport React, { FC } from 'react'\r\n\r\nconst RandomFrequency: FC<any> = () => {\r\n    const { oscillators } = useAudioContextState()\r\n    const { addOscillator, stopAllOscillators } = useAudioContextActions()\r\n\r\n    function getRandomInt(min, max) {\r\n        min = Math.ceil(min)\r\n        max = Math.floor(max)\r\n        return Math.floor(Math.random() * (max - min) + min) //The maximum is exclusive and the minimum is inclusive\r\n    }\r\n\r\n    document.body.onkeyup = function (e) {\r\n        if (e.code === 'Space') {\r\n            addOscillator(getRandomInt(100, 1000))\r\n        }\r\n        if (e.code === 'Escape') {\r\n            stopAllOscillators()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Random Frequency</h3>\r\n            <p>\r\n                Space Bar - Add a random frequency <br /> Escape - Stop all\r\n                sounds\r\n            </p>\r\n            {oscillators.map((o, i) => {\r\n                return <pre key={i}>{o.node.frequency.value} Hz</pre>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomFrequency\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport Harmonics from 'pages/harmonics'\r\nimport PageNavigation from 'components/page-navigation/page-navigation'\r\nimport WhiteNoise from 'components/white-noise/white-noise'\r\nimport RandomFrequency from './pages/random-frequency'\r\n\r\nfunction Routes() {\r\n    return (\r\n        <Router>\r\n            <PageNavigation/>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Harmonics} />\r\n                <Route exact path=\"/relative-intervals\" component={Harmonics} />\r\n                <Route exact path=\"/whitenoise\" component={WhiteNoise} />\r\n                <Route exact path=\"/random\" component={RandomFrequency} />\r\n                <Route exact path=\"/\" component={Harmonics} />\r\n                <Route path=\"/*\">\r\n                    <div>Not Found..</div>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport Routes from './routes'\r\nimport styled from '@emotion/styled'\r\n\r\nfunction App() {\r\n    return (\r\n        <AppWrapper>\r\n            <h3>Sound Sandbox</h3>\r\n            <Routes />\r\n        </AppWrapper>\r\n    )\r\n}\r\n\r\nconst AppWrapper = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n)\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error)\r\n        })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister()\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'react-vis/dist/style.css';\r\nimport { AudioContextProvider } from 'context/audio-context'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AudioContextProvider>\r\n            <App />\r\n        </AudioContextProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}